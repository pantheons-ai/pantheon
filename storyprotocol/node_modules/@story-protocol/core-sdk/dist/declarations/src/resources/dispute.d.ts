import { PublicClient, WalletClient } from "viem";
import { CancelDisputeRequest, CancelDisputeResponse, RaiseDisputeRequest, RaiseDisputeResponse, ResolveDisputeRequest, ResolveDisputeResponse } from "../types/resources/dispute.js";
export declare class DisputeClient {
    private readonly wallet;
    private readonly rpcClient;
    disputeModuleConfig: {
        abi: ({
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "caller";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__CallerIsNotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__NotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessControlled__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__CallerIsNotIPAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessController__IPAccountIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__IPAccountIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "signer";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4";
                readonly name: "func";
                readonly type: "bytes4";
            }];
            readonly name: "AccessController__PermissionDenied";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__PermissionIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }];
            readonly name: "AccessController__RecipientIsNotRegisteredModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__SignerIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__AlreadyClaimed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ClaimerNotAnAncestor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ERC20BalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ETHBalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidClaimer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ZeroRoyaltyPolicyLAP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__NotDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroPaymentToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotAbleToResolve";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotDisputeInitiator";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotInDisputeState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__InconsistentState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__NewStateIsTheSameWithOldState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__OnlyProtocolAdmin";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ProtocolPaused";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "string";
                readonly name: "interfaceName";
                readonly type: "string";
            }];
            readonly name: "Governance__UnsupportedInterface";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccountRegistry_InvalidIpAccountImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__ExpiredSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidAccessController";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidCalldata";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSigner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__AlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__IPAccountAlreadyCreated";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidMetadataProvider";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__NotYetRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__RegistrantUnauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__ResolverInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_InvalidIP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__NotTransferable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__RevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModuleAware__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicenseRegistry";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicensorAndPolicyNotSet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CommercialTermInNonCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativeRevShareSumExceedsMaxRNFTSupply";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativesCannotAddPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DisputedIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyLicenseUrl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyParamName";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__FrameworkNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorRoyaltyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidLicensor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidPolicyFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorDoesntHaveThisPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkParentParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkingRevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintLicenseParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintingFeeTokenNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MismatchBetweenRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__NotLicensee";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierLengthMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParentIdEqualThanChild";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyAlreadySetForIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RegisterPolicyFrameworkMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RoyaltyPolicyNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__TransferParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnregisteredFrameworkAddingPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensorApprovalChecker__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__HashInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__IPAssetOwnerInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__MetadataNotCompatible";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__NameInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrantInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrationDateInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__URIInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeProviderInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeUnavailable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__InterfaceIdZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressNotContract";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameDoesNotMatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Module_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "commercializer";
                readonly type: "address";
            }];
            readonly name: "PolicyFrameworkManager__CommercializerCheckerDoesNotSupportHook";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "PolicyFrameworkManager__GettingPolicyWrongFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RegistrationModule__InvalidOwner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoParentsOnLinking";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotAllowedCaller";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ImplementationAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestors";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsRoyalty";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidRoyaltyAmountLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotFullOwnership";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroAncestorsVaultImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitFactory";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitMain";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
            readonly type: "error";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: false;
                readonly internalType: "uint256";
                readonly name: "disputeId";
                readonly type: "uint256";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly name: "DisputeCancelled";
            readonly type: "event";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: false;
                readonly internalType: "uint256";
                readonly name: "disputeId";
                readonly type: "uint256";
            }, {
                readonly indexed: false;
                readonly internalType: "address";
                readonly name: "targetIpId";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "address";
                readonly name: "disputeInitiator";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "address";
                readonly name: "arbitrationPolicy";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes32";
                readonly name: "linkToDisputeEvidence";
                readonly type: "bytes32";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes32";
                readonly name: "targetTag";
                readonly type: "bytes32";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly name: "DisputeRaised";
            readonly type: "event";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: false;
                readonly internalType: "uint256";
                readonly name: "disputeId";
                readonly type: "uint256";
            }];
            readonly name: "DisputeResolved";
            readonly type: "event";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "disputeId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly name: "cancelDispute";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "targetIpId";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "linkToDisputeEvidence";
                readonly type: "string";
            }, {
                readonly internalType: "bytes32";
                readonly name: "targetTag";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly name: "raiseDispute";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "";
                readonly type: "uint256";
            }];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "disputeId";
                readonly type: "uint256";
            }];
            readonly name: "resolveDispute";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        })[];
        address: `0x${string}`;
    };
    constructor(rpcClient: PublicClient, wallet: WalletClient);
    /**
     * Raises a dispute on a given ipId
     * @param request - The request object containing necessary data to raise a dispute.
     *   @param request.targetIpId - The IP ID that is the target of the dispute.
     *   @param request.arbitrationPolicy - The address of the arbitration policy.
     *   @param request.linkToDisputeEvidence - The link to the dispute evidence.
     *   @param request.targetTag - The target tag of the dispute.
     *   @param request.calldata - Optional calldata to initialize the policy.
     *   @param request.txOptions - Optional transaction options.
     * @returns A Promise that resolves to a RaiseDisputeResponse containing the transaction hash.
     * @throws `NotRegisteredIpId` if targetIpId is not registered in the IPA Registry.
     * @throws `NotWhitelistedDisputeTag` if targetTag is not whitelisted.
     * @throws `ZeroLinkToDisputeEvidence` if linkToDisputeEvidence is empty
     * @calls raiseDispute(address _targetIpId, string memory _linkToDisputeEvidence, bytes32 _targetTag, bytes calldata _data) external nonReentrant returns (uint256) {
     * @emits DisputeRaised (disputeId_, targetIpId, msg.sender, arbitrationPolicy, linkToDisputeEvidence, targetTag, calldata);
     */
    raiseDispute(request: RaiseDisputeRequest): Promise<RaiseDisputeResponse>;
    /**
     * Cancels an ongoing dispute
     * @param request The request object containing details to cancel the dispute.
     *   @param request.disputeId The ID of the dispute to be cancelled.
     *   @param request.calldata Optional additional data used in the cancellation process.
     * @returns A Promise that resolves to a CancelDisputeResponse containing the transaction hash.
     * @throws NotInDisputeState, if the currentTag of the Dispute is not being disputed
     * @throws NotDisputeInitiator, if the transaction executor is not the one that initiated the dispute
     * @throws error if the Dispute's ArbitrationPolicy contract is not valid
     * @calls cancelDispute(uint256 _disputeId, bytes calldata _data) external nonReentrant {
     * @emits DisputeCancelled (_disputeId, _data);
     */
    cancelDispute(request: CancelDisputeRequest): Promise<CancelDisputeResponse>;
    /**
     * Resolves a dispute after it has been judged
     * @param request The request object containing details to resolve the dispute.
     *   @param request.disputeId The ID of the dispute to be resolved.
     * @returns A Promise that resolves to a ResolveDisputeResponse.
     * @throws NotAbleToResolve, if currentTag is still in dispute (i.e still needs a judgement to be set)
     * @throws NotDisputeInitiator, if the transaction executor is not the one that initiated the dispute
     * @emits DisputeResolved (_disputeId)
     */
    resolveDispute(request: ResolveDisputeRequest): Promise<ResolveDisputeResponse>;
}
//# sourceMappingURL=dispute.d.ts.map