import { PublicClient, WalletClient } from "viem";
import { RegisterPILPolicyRequest, RegisterPILPolicyResponse, RegisterPILSocialRemixPolicyRequest, RegisterPILSocialRemixPolicyResponse, RegisterPILCommercialUsePolicyRequest, RegisterPILCommercialUsePolicyResponse, AddPolicyToIpRequest, AddPolicyToIpResponse } from "../types/resources/policy.js";
export declare class PolicyClient {
    private readonly wallet;
    private readonly rpcClient;
    ipAccountABI: ({
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__CallerIsNotIpAccount";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "ipAccount";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AccessController__CallerIsNotIPAccount";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "ipAccount";
            readonly type: "address";
        }];
        readonly name: "AccessController__IPAccountIsNotValid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AccessController__IPAccountIsZeroAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "ipAccount";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "func";
            readonly type: "bytes4";
        }];
        readonly name: "AccessController__PermissionDenied";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AccessController__PermissionIsNotValid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }];
        readonly name: "AccessController__RecipientIsNotRegisteredModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AccessController__SignerIsZeroAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__AlreadyClaimed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__ClaimerNotAnAncestor";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__ERC20BalanceNotZero";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__ETHBalanceNotZero";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__InvalidAncestorsHash";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__InvalidClaimer";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__TransferFailed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "AncestorsVaultLAP__ZeroRoyaltyPolicyLAP";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicySP__NotDisputeModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicySP__ZeroDisputeModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ArbitrationPolicySP__ZeroPaymentToken";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotAbleToResolve";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotDisputeInitiator";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotInDisputeState";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotRegisteredIpId";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedDisputeTag";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__UnauthorizedAccess";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationRelayer";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroDisputeTag";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Governance__InconsistentState";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Governance__NewStateIsTheSameWithOldState";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Governance__OnlyProtocolAdmin";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Governance__ProtocolPaused";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "interfaceName";
            readonly type: "string";
        }];
        readonly name: "Governance__UnsupportedInterface";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Governance__ZeroAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccountRegistry_InvalidIpAccountImpl";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccount__ExpiredSignature";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidAccessController";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidCalldata";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSignature";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSigner";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__AlreadyRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__IPAccountAlreadyCreated";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__InvalidAccount";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__InvalidMetadataProvider";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__NotYetRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__RegistrantUnauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__ResolverInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__Unauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPResolver_InvalidIP";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "IPResolver_Unauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__CallerNotLicensingModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__NotTransferable";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__RevokedLicense";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroDisputeModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroLicensingModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModuleAware__CallerNotLicensingModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__CallerNotLicenseRegistry";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__CallerNotLicensorAndPolicyNotSet";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__CommercialTermInNonCommercialPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DerivativeRevShareSumExceedsMaxRNFTSupply";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DerivativesCannotAddPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DisputedIpId";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__EmptyLicenseUrl";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__EmptyParamName";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__FrameworkNotFound";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__IncompatibleLicensorCommercialPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__IncompatibleLicensorRoyaltyDerivativeRevShare";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__IncompatibleRoyaltyPolicyAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__IncompatibleRoyaltyPolicyDerivativeRevShare";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__InvalidLicensor";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__InvalidPolicyFramework";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__LicensorDoesntHaveThisPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__LicensorNotRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__LinkParentParamFailed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__LinkingRevokedLicense";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MintLicenseParamFailed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MintingFeeTokenNotWhitelisted";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MismatchBetweenRoyaltyPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__NotLicensee";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ParamVerifierAlreadySet";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ParamVerifierLengthMismatch";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ParentIdEqualThanChild";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__PolicyAlreadySetForIpId";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__PolicyNotFound";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__RegisterPolicyFrameworkMismatch";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__RoyaltyPolicyNotWhitelisted";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__TransferParamFailed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__UnauthorizedAccess";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensingModule__UnregisteredFrameworkAddingPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "LicensorApprovalChecker__Unauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__HashInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly []; /**
         * Convenient function to register a PIL social remix policy to the registry
         * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
         * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
         *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor
         *   @param mintingFee Fee to be paid when minting a license
         *   @param mintingFeeToken Token to be used to pay the minting fee
         *   @param request.territories List of territories where the license is valid. If empty, global.
         *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
         *   @param request.contentRestrictions List of content restrictions where the license is valid. Empty if no restrictions.
         * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
         */
        readonly name: "MetadataProvider__IPAssetOwnerInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__MetadataNotCompatible";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__NameInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__RegistrantInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__RegistrationDateInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__URIInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__Unauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__UpgradeProviderInvalid";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "MetadataProvider__UpgradeUnavailable";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__InterfaceIdZero";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressNotContract";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeEmptyString";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameAlreadyRegistered";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameDoesNotMatch";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameEmptyString";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "Module_Unauthorized";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "commercializer";
            readonly type: "address";
        }];
        readonly name: "PolicyFrameworkManager__CommercializerCheckerDoesNotSupportHook";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "PolicyFrameworkManager__GettingPolicyWrongFramework";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RegistrationModule__InvalidOwner";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NoParentsOnLinking";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotAllowedCaller";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotRegisteredIpId";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroLicensingModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyToken";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ImplementationAlreadySet";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidAncestors";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidAncestorsHash";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidAncestorsLength";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidAncestorsRoyalty";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidRoyaltyAmountLength";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__NotFullOwnership";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__TransferFailed";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroAncestorsVaultImpl";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitFactory";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitMain";
        readonly type: "error";
    } | {
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
        readonly type: "error";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    } | {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "executeWithSig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    })[];
    licensingModuleConfig: {
        abi: ({
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "caller";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__CallerIsNotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__NotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessControlled__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__CallerIsNotIPAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessController__IPAccountIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__IPAccountIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "signer";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4";
                readonly name: "func";
                readonly type: "bytes4";
            }];
            readonly name: "AccessController__PermissionDenied";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__PermissionIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }];
            readonly name: "AccessController__RecipientIsNotRegisteredModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__SignerIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__AlreadyClaimed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ClaimerNotAnAncestor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ERC20BalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ETHBalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidClaimer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ZeroRoyaltyPolicyLAP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__NotDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroPaymentToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotAbleToResolve";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotDisputeInitiator";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotInDisputeState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__InconsistentState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__NewStateIsTheSameWithOldState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__OnlyProtocolAdmin";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ProtocolPaused";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "string";
                readonly name: "interfaceName";
                readonly type: "string";
            }];
            readonly name: "Governance__UnsupportedInterface";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccountRegistry_InvalidIpAccountImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__ExpiredSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidAccessController";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidCalldata";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSigner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__AlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__IPAccountAlreadyCreated";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidMetadataProvider";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__NotYetRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__RegistrantUnauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__ResolverInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_InvalidIP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__NotTransferable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__RevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModuleAware__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicenseRegistry";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicensorAndPolicyNotSet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CommercialTermInNonCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativeRevShareSumExceedsMaxRNFTSupply";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativesCannotAddPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DisputedIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyLicenseUrl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyParamName";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__FrameworkNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorRoyaltyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidLicensor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidPolicyFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorDoesntHaveThisPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkParentParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkingRevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintLicenseParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintingFeeTokenNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MismatchBetweenRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__NotLicensee";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierLengthMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParentIdEqualThanChild";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyAlreadySetForIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RegisterPolicyFrameworkMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RoyaltyPolicyNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__TransferParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnregisteredFrameworkAddingPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensorApprovalChecker__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__HashInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly []; /**
             * Convenient function to register a PIL social remix policy to the registry
             * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
             * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
             *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor
             *   @param mintingFee Fee to be paid when minting a license
             *   @param mintingFeeToken Token to be used to pay the minting fee
             *   @param request.territories List of territories where the license is valid. If empty, global.
             *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
             *   @param request.contentRestrictions List of content restrictions where the license is valid. Empty if no restrictions.
             * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
             */
            readonly name: "MetadataProvider__IPAssetOwnerInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__MetadataNotCompatible";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__NameInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrantInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrationDateInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__URIInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeProviderInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeUnavailable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__InterfaceIdZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressNotContract";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameDoesNotMatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Module_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "commercializer";
                readonly type: "address";
            }];
            readonly name: "PolicyFrameworkManager__CommercializerCheckerDoesNotSupportHook";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "PolicyFrameworkManager__GettingPolicyWrongFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RegistrationModule__InvalidOwner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoParentsOnLinking";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotAllowedCaller";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ImplementationAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestors";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsRoyalty";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidRoyaltyAmountLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotFullOwnership";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroAncestorsVaultImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitFactory";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitMain";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
            readonly type: "error";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: true;
                readonly internalType: "address";
                readonly name: "caller";
                readonly type: "address";
            }, {
                readonly indexed: true;
                readonly internalType: "address";
                readonly name: "ipId";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "address[]";
                readonly name: "parentIpIds";
                readonly type: "address[]";
            }];
            readonly name: "IpIdLinkedToParents";
            readonly type: "event";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: true;
                readonly internalType: "address";
                readonly name: "caller";
                readonly type: "address";
            }, {
                readonly indexed: true;
                readonly internalType: "address";
                readonly name: "ipId";
                readonly type: "address";
            }, {
                readonly indexed: true;
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }, {
                readonly indexed: false;
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly indexed: false;
                readonly internalType: "bool";
                readonly name: "isInherited";
                readonly type: "bool";
            }];
            readonly name: "PolicyAddedToIpId";
            readonly type: "event";
        } | {
            readonly anonymous: false;
            readonly inputs: readonly [{
                readonly indexed: true;
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }, {
                readonly indexed: true;
                readonly internalType: "address";
                readonly name: "policyFrameworkManager";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes";
                readonly name: "frameworkData";
                readonly type: "bytes";
            }, {
                readonly indexed: false;
                readonly internalType: "address";
                readonly name: "royaltyPolicy";
                readonly type: "address";
            }, {
                readonly indexed: false;
                readonly internalType: "bytes";
                readonly name: "royaltyData";
                readonly type: "bytes";
            }, {
                readonly indexed: false;
                readonly internalType: "uint256";
                readonly name: "mintingFee";
                readonly type: "uint256";
            }, {
                readonly indexed: false;
                readonly internalType: "address";
                readonly name: "mintingFeeToken";
                readonly type: "address";
            }];
            readonly name: "PolicyRegistered";
            readonly type: "event";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipId";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "polId";
                readonly type: "uint256";
            }];
            readonly name: "addPolicyToIp";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "indexOnIpId";
                readonly type: "uint256";
            }];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly components: readonly [{
                    readonly internalType: "bool";
                    readonly name: "isLicenseTransferable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "address";
                    readonly name: "policyFramework";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "frameworkData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "address";
                    readonly name: "royaltyPolicy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "royaltyData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "mintingFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "mintingFeeToken";
                    readonly type: "address";
                }];
                readonly internalType: "struct Licensing.Policy";
                readonly name: "pol";
                readonly type: "tuple";
            }];
            readonly name: "getPolicyId";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "licenseIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "address";
                readonly name: "childIpId";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "royaltyContext";
                readonly type: "bytes";
            }];
            readonly name: "linkIpToParents";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "licensorIpId";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "royaltyContext";
                readonly type: "bytes";
            }];
            readonly name: "mintLicense";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "licenseId";
                readonly type: "uint256";
            }];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        } | {
            readonly inputs: readonly [{
                readonly components: readonly [{
                    readonly internalType: "bool";
                    readonly name: "isLicenseTransferable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "address";
                    readonly name: "policyFramework";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "frameworkData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "address";
                    readonly name: "royaltyPolicy";
                    readonly type: "address";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "royaltyData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "mintingFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "mintingFeeToken";
                    readonly type: "address";
                }];
                readonly internalType: "struct Licensing.Policy";
                readonly name: "pol";
                readonly type: "tuple";
            }];
            readonly name: "registerPolicy";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        })[];
        address: `0x${string}`;
    };
    pilPolicyFrameworkManagerConfig: {
        abi: ({
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "caller";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__CallerIsNotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessControlled__NotIpAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessControlled__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__CallerIsNotIPAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }];
            readonly name: "AccessController__IPAccountIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__IPAccountIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "ipAccount";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "signer";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4";
                readonly name: "func";
                readonly type: "bytes4";
            }];
            readonly name: "AccessController__PermissionDenied";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__PermissionIsNotValid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }];
            readonly name: "AccessController__RecipientIsNotRegisteredModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AccessController__SignerIsZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__AlreadyClaimed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ClaimerNotAnAncestor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ERC20BalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ETHBalanceNotZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__InvalidClaimer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "AncestorsVaultLAP__ZeroRoyaltyPolicyLAP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__NotDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ArbitrationPolicySP__ZeroPaymentToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotAbleToResolve";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotDisputeInitiator";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotInDisputeState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__NotWhitelistedDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroArbitrationRelayer";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroDisputeTag";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__InconsistentState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__NewStateIsTheSameWithOldState";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__OnlyProtocolAdmin";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ProtocolPaused";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "string";
                readonly name: "interfaceName";
                readonly type: "string";
            }];
            readonly name: "Governance__UnsupportedInterface";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Governance__ZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccountRegistry_InvalidIpAccountImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__ExpiredSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidAccessController";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidCalldata";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSignature";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAccount__InvalidSigner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__AlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__IPAccountAlreadyCreated";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidAccount";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__InvalidMetadataProvider";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__NotYetRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__RegistrantUnauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__ResolverInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPAssetRegistry__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_InvalidIP";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "IPResolver_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__NotTransferable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__RevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroDisputeModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicenseRegistry__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModuleAware__CallerNotLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicenseRegistry";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CallerNotLicensorAndPolicyNotSet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__CommercialTermInNonCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativeRevShareSumExceedsMaxRNFTSupply";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DerivativesCannotAddPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__DisputedIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyLicenseUrl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__EmptyParamName";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__FrameworkNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorCommercialPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleLicensorRoyaltyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__IncompatibleRoyaltyPolicyDerivativeRevShare";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidLicensor";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__InvalidPolicyFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorDoesntHaveThisPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LicensorNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkParentParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__LinkingRevokedLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintLicenseParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MintingFeeTokenNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__MismatchBetweenRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__NotLicensee";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParamVerifierLengthMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__ParentIdEqualThanChild";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyAlreadySetForIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__PolicyNotFound";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RegisterPolicyFrameworkMismatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__RoyaltyPolicyNotWhitelisted";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__TransferParamFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnauthorizedAccess";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensingModule__UnregisteredFrameworkAddingPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "LicensorApprovalChecker__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__HashInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly []; /**
             * Convenient function to register a PIL social remix policy to the registry
             * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
             * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
             *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor
             *   @param mintingFee Fee to be paid when minting a license
             *   @param mintingFeeToken Token to be used to pay the minting fee
             *   @param request.territories List of territories where the license is valid. If empty, global.
             *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
             *   @param request.contentRestrictions List of content restrictions where the license is valid. Empty if no restrictions.
             * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
             */
            readonly name: "MetadataProvider__IPAssetOwnerInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__MetadataNotCompatible";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__NameInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrantInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__RegistrationDateInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__URIInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeProviderInvalid";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "MetadataProvider__UpgradeUnavailable";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__InterfaceIdZero";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressNotContract";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameAlreadyRegistered";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameDoesNotMatch";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "ModuleRegistry__NameEmptyString";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "Module_Unauthorized";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "commercializer";
                readonly type: "address";
            }];
            readonly name: "PolicyFrameworkManager__CommercializerCheckerDoesNotSupportHook";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "PolicyFrameworkManager__GettingPolicyWrongFramework";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RegistrationModule__InvalidOwner";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoParentsOnLinking";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotAllowedCaller";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotRegisteredIpId";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyModule__ZeroRoyaltyToken";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ImplementationAlreadySet";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestors";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsHash";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidAncestorsRoyalty";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__InvalidRoyaltyAmountLength";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotFullOwnership";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__TransferFailed";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroAncestorsVaultImpl";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitFactory";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroLiquidSplitMain";
            readonly type: "error";
        } | {
            readonly inputs: readonly [];
            readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
            readonly type: "error";
        } | {
            readonly inputs: readonly [{
                readonly components: readonly [{
                    readonly internalType: "bool";
                    readonly name: "transferable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "address";
                    readonly name: "royaltyPolicy";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "mintingFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "mintingFeeToken";
                    readonly type: "address";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bool";
                        readonly name: "attribution";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "commercialUse";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "commercialAttribution";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "address";
                        readonly name: "commercializerChecker";
                        readonly type: "address";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "commercializerCheckerData";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint32";
                        readonly name: "commercialRevShare";
                        readonly type: "uint32";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "derivativesAllowed";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "derivativesAttribution";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "derivativesApproval";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "derivativesReciprocal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "string[]";
                        readonly name: "territories";
                        readonly type: "string[]";
                    }, {
                        readonly internalType: "string[]";
                        readonly name: "distributionChannels";
                        readonly type: "string[]";
                    }, {
                        readonly internalType: "string[]";
                        readonly name: "contentRestrictions";
                        readonly type: "string[]";
                    }];
                    readonly internalType: "struct PILPolicy";
                    readonly name: "policy";
                    readonly type: "tuple";
                }];
                readonly internalType: "struct RegisterPILPolicyParams";
                readonly name: "params";
                readonly type: "tuple";
            }];
            readonly name: "registerPolicy";
            readonly outputs: readonly [{
                readonly internalType: "uint256";
                readonly name: "policyId";
                readonly type: "uint256";
            }];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        })[];
        address: `0x${string}`;
    };
    royaltyPolicyLAPConfig: {
        address: `0x${string}`;
    };
    constructor(rpcClient: PublicClient, wallet: WalletClient);
    /**
     * Registers a PIL policy to the registry
     * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
     * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
     *   @param request.transferable Whether or not the license is transferable
     *   @param request.attribution Whether or not attribution is required when reproducing the work
     *   @param request.commercialUse Whether or not the work can be used commercially
     *   @param request.commercialAttribution Whether or not attribution is required when reproducing the work commercially
     *   @param request.commercializerChecker commericializers that are allowed to commercially exploit the work. If zero address, then no restrictions is enforced.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor
     *   @param request.derivativesAllowed Whether or not the licensee can create derivatives of his work
     *   @param request.derivativesAttribution Whether or not attribution is required for derivatives of the work
     *   @param request.derivativesApproval Whether or not the licensor must approve derivatives of the work before they can be linked to the licensor IP ID
     *   @param request.derivativesReciprocal Whether or not the licensee must license derivatives of the work under the same terms.
     *   @param request.territories List of territories where the license is valid. If empty, global.
     *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
     *   @param request.royaltyPolicy Address of a royalty policy contract (e.g. RoyaltyPolicyLS) that will handle royalty payments
     * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
     */
    registerPILPolicy(request: RegisterPILPolicyRequest): Promise<RegisterPILPolicyResponse>;
    /**
     * Convenient function to register a PIL social remix policy to the registry
     * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
     * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
     *   @param request.territories List of territories where the license is valid. If empty, global.
     *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
     *   @param request.contentRestrictions List of content restrictions where the license is valid. Empty if no restrictions.
     * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
     */
    registerPILSocialRemixPolicy(request: RegisterPILSocialRemixPolicyRequest): Promise<RegisterPILSocialRemixPolicyResponse>;
    /**
     * Convenient function to register a PIL social remix policy to the registry
     * Internally, this function must generate a Licensing.Policy struct and call registerPolicy.
     * @param request - the licensing parameters for the Programmable IP License v1 (PIL) standard.
     *   @param request.commercialRevShare Percentage of revenue that must be shared with the licensor
     *   @param mintingFee Fee to be paid when minting a license
     *   @param mintingFeeToken Token to be used to pay the minting fee
     *   @param request.territories List of territories where the license is valid. If empty, global.
     *   @param request.distributionChannels List of distribution channels where the license is valid. Empty if no restrictions.
     *   @param request.contentRestrictions List of content restrictions where the license is valid. Empty if no restrictions.
     * @returns the transaction hash and the policy ID if the txOptions.waitForTransaction is set to true
     */
    registerPILCommercialUsePolicy(request: RegisterPILCommercialUsePolicyRequest): Promise<RegisterPILCommercialUsePolicyResponse>;
    private getPolicyId;
    private encodeFrameworkData;
    /**
     * Adds a policy to the set of policies of an IP
     * @param request The request object containing details to add a policy to an IP
     *   @param request.ipId The id of the IP
     *   @param request.polId The id of the policy
     * @return the transaction hash and the index of the policy in the IP's policy set if the txOptions.waitForTransaction is set to true
     */
    addPolicyToIp(request: AddPolicyToIpRequest): Promise<AddPolicyToIpResponse>;
}
//# sourceMappingURL=policy.d.ts.map