import { StoryConfig } from "./types/config.js";
import { IPAssetClient } from "./resources/ipAsset.js";
import { PermissionClient } from "./resources/permission.js";
import { LicenseClient } from "./resources/license.js";
import { PolicyClient } from "./resources/policy.js";
import { DisputeClient } from "./resources/dispute.js";
import { IPAccountClient } from "./resources/ipAccount.js";
/**
 * The StoryClient is the main entry point for the SDK.
 */
export declare class StoryClient {
    private readonly config;
    private readonly rpcClient;
    private readonly wallet;
    private readonly storyClient;
    private _ipAsset;
    private _permission;
    private _license;
    private _policy;
    private _dispute;
    private _ipAccount;
    /**
     * @param config - the configuration for the SDK client
     */
    private constructor();
    /**
     * Factory method for creating a SDK client with a signer.
     *
     * @param config - the configuration for a new SDK client
     */
    static newClient(config: StoryConfig): StoryClient;
    /**
     * Getter for the ip asset client. The client is lazily created when
     * this method is called.
     *
     * @returns the IPAssetClient instance
     */
    get ipAsset(): IPAssetClient;
    /**
     * Getter for the permission client. The client is lazily created when
     * this method is called.
     *
     * @returns the PermissionClient instance
     */
    get permission(): PermissionClient;
    /**
     * Getter for the license client. The client is lazily created when
     * this method is called.
     *
     * @returns the LicenseClient instance
     */
    get license(): LicenseClient;
    /**
     * Getter for the policy client. The client is lazily created when
     * this method is called.
     *
     * @returns the PolicyClient instance
     */
    get policy(): PolicyClient;
    /**
     * Getter for the dispute client. The client is lazily created when
     * this method is called.
     *
     * @returns the DisputeClient instance
     */
    get dispute(): DisputeClient;
    /**
     * Getter for the ip account client. The client is lazily created when
     * this method is called.
     *
     * @returns the IPAccountClient instance
     */
    get ipAccount(): IPAccountClient;
}
//# sourceMappingURL=client.d.ts.map